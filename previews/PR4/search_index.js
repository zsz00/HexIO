var documenterSearchIndex = {"docs":
[{"location":"apis/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"apis/#HexIO-API","page":"API","title":"HexIO API","text":"","category":"section"},{"location":"apis/","page":"API","title":"API","text":"HexIO.unpack\nHexIO.pack\nHexIO.fix_endian\nHexIO.packed_sizeof\nHexIO.@io\n\nHexIO.Hex\nHexIO.dump!\nHexIO.edit!\nHexIO.find!\n","category":"page"},{"location":"apis/#HexIO.unpack","page":"API","title":"HexIO.unpack","text":"unpack(io::IO, T::Type, endianness::Symbol = :NativeEndian)\n\nGiven an input io, unpack type T, byte-swapping according to the given endianness of io. If endianness is :NativeEndian (the default), no byteswapping will occur.  If endianness is :LittleEndian or :BigEndian, byteswapping will occur of the endianness if the host system does not match the endianness of io.\n\n\n\n\n\n","category":"function"},{"location":"apis/#HexIO.pack","page":"API","title":"HexIO.pack","text":"pack(io::IO, source, endianness::Symbol = :NativeEndian)\n\nGiven an input source, pack it into io, byte-swapping according to the given endianness of io. If endianness is :NativeEndian (the default), no byteswapping will occur.  If endianness is :LittleEndian or :BigEndian, byteswapping will occur if the endianness of the host system does not match the endianness of io.\n\n\n\n\n\n","category":"function"},{"location":"apis/#HexIO.fix_endian","page":"API","title":"HexIO.fix_endian","text":"fix_endian(x, endianness::Symbol)\n\nReturns a byte-swapped version of x if the given endianness must be swapped for the current host system.\n\n\n\n\n\n","category":"function"},{"location":"apis/#HexIO.@io","page":"API","title":"HexIO.@io","text":"@io <type definition>\n    ...\nend\n\nGenerates packing_strategy() and packed_sizeof() methods for the type being defined within the given type definition.  This enables usage of the unpack method.\n\n\n\n\n\n","category":"macro"},{"location":"apis/#HexIO.Hex","page":"API","title":"HexIO.Hex","text":"Hex(filename::AbstractString, _offset::Int=0)\n\n\n\n\n\nHex(io::IO, _offset::Int=0)\n\n\n\n\n\n","category":"type"},{"location":"apis/#HexIO.dump!","page":"API","title":"HexIO.dump!","text":"dump!(s::Hex, start=nothing, n=nothing)\n\ndisplay data chunk of n size beginning at offset\n\n\n\n\n\n","category":"function"},{"location":"apis/#HexIO.edit!","page":"API","title":"HexIO.edit!","text":"edit!(s::Hex, datastr::AbstractString, start=nothing)\n\nedit binary file.\n\n\n\n\n\n","category":"function"},{"location":"apis/#HexIO.find!","page":"API","title":"HexIO.find!","text":"find!(s::Hex, sigstr::AbstractString, start=nothing)\n\nsearch for binary signature and return the offset or nothing;  modify s._offset to point to beginning of located signature\n\n\n\n\n\n","category":"function"},{"location":"#HexIO","page":"Introduction","title":"HexIO","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: Build Status) (Image: Coverage)","category":"page"},{"location":"#unpack-and-pack","page":"Introduction","title":"unpack and pack","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Generates IO methods (pack, unpack) from structure definitions.  Also defines packed_sizeof to give the on-disk size of a packed structure, which is smaller than sizeof would give, if the struct is marked as align_packed.","category":"page"},{"location":"#Example-usage","page":"Introduction","title":"Example usage","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using HexIO\n\njulia> @io struct TwoUInt64s\n           x::UInt64\n           y::UInt64\n       end\n\njulia> buf = IOBuffer(collect(UInt8(1):UInt8(16))); \n\njulia> seekstart(buf); unpack(buf, TwoUInt64s) # Default endianness depends on machine\nTwoUInt64s(0x0807060504030201, 0x100f0e0d0c0b0a09)\n\njulia> seekstart(buf); unpack(buf, TwoUInt64s, :BigEndian)\nTwoUInt64s(0x0102030405060708, 0x090a0b0c0d0e0f10)\n\nio = open(\"\", \"rb\")\nbuffer = read(io, read_size)\n","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"#editing-and-displaying","page":"Introduction","title":"editing and displaying","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Hex has same fuctions for editing and displaying data in binary files in hexadecimal format.","category":"page"},{"location":"#dump!(self::Hex,-offset-0,-n::Int-1)","page":"Introduction","title":"dump!(self::Hex, offset = 0, n::Int = -1)","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Displays binary file data beginning at offset and ending at offset + n.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"offset defaults to 0\nn defaults to file size - n.","category":"page"},{"location":"#edit!(self::Hex,-datastr::String,-offset-0)","page":"Introduction","title":"edit!(self::Hex, datastr::String, offset = 0)","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Edits targeted binary file by overwriting data beginning at offset.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"offset defaults to 0\ndatastr can be in ASCII or hexadecimal format (ie. \"foobar\" or \"0x666f6f626172\")","category":"page"},{"location":"#Example-usage-2","page":"Introduction","title":"Example usage","text":"","category":"section"},{"location":"#Complete-File-Hexdump","page":"Introduction","title":"Complete File Hexdump","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"hex = Hex(\"test/test.bin\")\ndump!(hex, 0x00)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"00000000 | 5D 00 00 80 66 6F 6F 62   61 72 FF FF FF 00 7F E1 |]...foobar......\n00000010 | 90 E6 67 83 93 40 93 22   A0 1B AB 50 6E A1 93 54 |..g..@.\"...Pn..T\n00000020 | 3A 7F FD A3 D9 C0 60 29   AF B6 94 96 3E AA 5C 38 |:.....`)....>.\\8\n00000030 | 1C 05 02 31 7D 74 72 0D   40 3C 22 DA EF FA CA 80 |...1}tr.@<\".....\n00000040 | DF F8 E2 7B CC 65 09 29   64 C3 15 DE E6 39 B7 7E |...{.e.)d....9.~\n00000050 | D5 8C AA 91 F0 28 37 E1   5D AD C0 37 74 16 CE C1 |.....(7.]..7t...\n00000060 | 75 94 1E EA DD 64 D6 B5   A1 2E 54 3D 62 4B 72 30 |u....d....T=bKr0\n00000070 | 5A 35 B8 5D 42 A2 24 A1   C6 22 6A BE C6 58 07 E5 |Z5.]B.$..\"j..X..\n00000080 | 4F F1 E3 FC 53 14 70 AA   AE 58 FA E3 D8 C4 3A DB |O...S.p..X....:.\n00000090 | D2 81 CF 99 24 10 4C C1   53 76 98 BC 16 E9 C2 7E |....$.L.Sv.....~\n000000A0 | 2C 6F 23 D6 F7 32 AB 81   7E 74 FD B6 FE B2 E7 15 |,o#..2..~t......\n000000B0 | 83 7D 45 96 44 A8 D9 CF   B2 B8 AD 37 73 0E 15 AD |.}E.D......7s...\nand so on...","category":"page"},{"location":"#Chunk-Hexdump","page":"Introduction","title":"Chunk Hexdump","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Dump 16 bytes beginning at offset 0x04","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"hex = Hex(\"test.bin\")\ndump!(hex, 0x04, 16)\n\n00000004 | 66 6F 6F 62 61 72 FF FF   FF 00 7F E1 90 E6 67 83 |foobar........g.\n\ndump!(hex.hex, 0x04, 16)\n\n00000004 | 66 6F 6F 62 61 72 FF FF   FF 00 7F E1 90 E6 67 83 |foobar........g.","category":"page"},{"location":"#Hexadecimal-Editing-(Hex-String)","page":"Introduction","title":"Hexadecimal Editing (Hex String)","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Write foobar to test.bin beginning at offset 0x04","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"hex = Hex(\"test.bin\")\nedit!(hex, \"0x666f6f626172\", 0x04)","category":"page"},{"location":"#Hexadecimal-Editing-(ASCII-string)","page":"Introduction","title":"Hexadecimal Editing (ASCII string)","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Write foobar to test.bin beginning at offset 0x04","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"hex = Hex(\"test.bin\")\nedit!(hex, \"foobar\", 0x04)","category":"page"},{"location":"#Binary-Singature-Location","page":"Introduction","title":"Binary Singature Location","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Return offset of the start of the hexadecimal signature \"b77e\"","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"hex = Hex(\"test.bin\")\noffset = find!(hex, \"0xb77e\")","category":"page"},{"location":"example/#HexIO-Example","page":"Example","title":"HexIO Example","text":"","category":"section"},{"location":"example/#Example-usage","page":"Example","title":"Example usage","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"julia> using HexIO\n\njulia> @io struct TwoUInt64s\n           x::UInt64\n           y::UInt64\n       end\n\njulia> buf = IOBuffer(collect(UInt8(1):UInt8(16))); \n\njulia> seekstart(buf); unpack(buf, TwoUInt64s) # Default endianness depends on machine\nTwoUInt64s(0x0807060504030201, 0x100f0e0d0c0b0a09)\n\njulia> seekstart(buf); unpack(buf, TwoUInt64s, :BigEndian)\nTwoUInt64s(0x0102030405060708, 0x090a0b0c0d0e0f10)\n\nio = open(\"\", \"rb\")\nbuffer = read(io, read_size)\n","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Hex has same fuctions for editing and displaying data in binary files in hexadecimal format.","category":"page"},{"location":"example/#Synopsis","page":"Example","title":"Synopsis","text":"","category":"section"},{"location":"example/#dump!(self::Hex,-offset-0,-n::Int-1)","page":"Example","title":"dump!(self::Hex, offset = 0, n::Int = -1)","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Displays binary file data beginning at offset and ending at offset + n.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"offset defaults to 0\nn defaults to file size - n.","category":"page"},{"location":"example/#edit!(self::Hex,-datastr::String,-offset-0)","page":"Example","title":"edit!(self::Hex, datastr::String, offset = 0)","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Edits targeted binary file by overwriting data beginning at offset.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"offset defaults to 0\ndatastr can be in ASCII or hexadecimal format (ie. \"foobar\" or \"0x666f6f626172\")","category":"page"},{"location":"example/#Examples","page":"Example","title":"Examples","text":"","category":"section"},{"location":"example/#Complete-File-Hexdump","page":"Example","title":"Complete File Hexdump","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"hex = Hex(\"test/test.bin\")\ndump!(hex, 0x00)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"00000000 | 5D 00 00 80 66 6F 6F 62   61 72 FF FF FF 00 7F E1 |]...foobar......\n00000010 | 90 E6 67 83 93 40 93 22   A0 1B AB 50 6E A1 93 54 |..g..@.\"...Pn..T\n00000020 | 3A 7F FD A3 D9 C0 60 29   AF B6 94 96 3E AA 5C 38 |:.....`)....>.\\8\n00000030 | 1C 05 02 31 7D 74 72 0D   40 3C 22 DA EF FA CA 80 |...1}tr.@<\".....\n00000040 | DF F8 E2 7B CC 65 09 29   64 C3 15 DE E6 39 B7 7E |...{.e.)d....9.~\n00000050 | D5 8C AA 91 F0 28 37 E1   5D AD C0 37 74 16 CE C1 |.....(7.]..7t...\n00000060 | 75 94 1E EA DD 64 D6 B5   A1 2E 54 3D 62 4B 72 30 |u....d....T=bKr0\n00000070 | 5A 35 B8 5D 42 A2 24 A1   C6 22 6A BE C6 58 07 E5 |Z5.]B.$..\"j..X..\n00000080 | 4F F1 E3 FC 53 14 70 AA   AE 58 FA E3 D8 C4 3A DB |O...S.p..X....:.\n00000090 | D2 81 CF 99 24 10 4C C1   53 76 98 BC 16 E9 C2 7E |....$.L.Sv.....~\n000000A0 | 2C 6F 23 D6 F7 32 AB 81   7E 74 FD B6 FE B2 E7 15 |,o#..2..~t......\n000000B0 | 83 7D 45 96 44 A8 D9 CF   B2 B8 AD 37 73 0E 15 AD |.}E.D......7s...\nand so on...","category":"page"},{"location":"example/#Chunk-Hexdump","page":"Example","title":"Chunk Hexdump","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Dump 16 bytes beginning at offset 0x04","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"hex = Hex(\"test.bin\")\ndump!(hex, 0x04, 16)\n\n00000004 | 66 6F 6F 62 61 72 FF FF   FF 00 7F E1 90 E6 67 83 |foobar........g.\n\ndump!(hex.hex, 0x04, 16)\n\n00000004 | 66 6F 6F 62 61 72 FF FF   FF 00 7F E1 90 E6 67 83 |foobar........g.","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"","category":"page"},{"location":"example/#Parse-the-MBR-of-the-disk","page":"Example","title":"Parse the MBR of the disk","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"using HexIO\n\n@io struct MBR\n    # BHBBHBII  16B\n    type_1::UInt8 # 分区状态\n    _1::UInt16\n    _2::UInt8      # \n    type_2::UInt8 # 分区文件系统类型\n    _3::UInt16   # xx\n    _4::UInt8  # xx\n    off_1::UInt32  # 起始偏移\n    p_size::UInt32  # 分区大小\nend align_packed\n\nfunction read_mbr()\n    # buf = Hex(\"\\\\\\\\.\\\\PHYSICALDRIVE0\")  # win\n    buf = Hex(\"/dev/sda\")   # linux\n    println(\"Data from the first partition of the disk:\")\n    dump!(buf.hex, 0, 512)\n\n    seek(buf.hex, 510)\n    flag = read(buf.hex, 2)   # win10里flag读不出来,是[]\n\n    if flag == [0x55, 0xaa]\n        endianness = :LittleEndian \n    else\n        endianness = :BigEndian\n    end\n    \n    p_type_1 = Dict(128=>\"active\",0=>\"normal\")\n    p_type_2 = Dict(15=>\"Extent\",7=>\"NTFS\",12=>\"FAT32\",131=>\"Linux\")\n\n    seek(buf.hex, 446)\n    println(\"Parses disk partition information:\")\n    for i in 1:4\n        buf_1 = read(buf.hex, 16)   # 每次读后,指针都会移动到当前位置\n        # dump!(buf.hex, 0, 16)\n        data = unpack(IOBuffer(buf_1), MBR, endianness)\n        println(\"Partition : $data\")\n        if data.type_2 == 0\n            continue\n        end\n        println(\"id:$i,type:$(p_type_2[data.type_2]),start:$(data.off_1*512/1024/1024)MB,size:$(data.p_size*512/1024/1024/1024)GB\")\n    end\nend\n\nread_mbr()","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Data from the first partition of the disk:\n00000000 | EB 63 90 10 8E D0 BC 00   B0 B8 00 00 8E D8 8E C0 |.c..............\n00000010 | FB BE 00 7C BF 00 06 B9   00 02 F3 A4 EA 21 06 00 |...|.........!..\n00000020 | 00 BE BE 07 38 04 75 0B   83 C6 10 81 FE FE 07 75 |....8.u........u\n00000030 | F3 EB 16 B4 02 B0 01 BB   00 7C B2 80 8A 74 01 8B |.........|...t..\n00000040 | 4C 02 CD 13 EA 00 7C 00   00 EB FE 00 00 00 00 00 |L.....|.........\n00000050 | 00 00 00 00 00 00 00 00   00 00 00 80 01 00 00 00 |................\n00000060 | 00 00 00 00 FF FA 90 90   F6 C2 80 74 05 F6 C2 70 |...........t...p\n00000070 | 74 02 B2 80 EA 79 7C 00   00 31 C0 8E D8 8E D0 BC |t....y|..1......\n00000080 | 00 20 FB A0 64 7C 3C FF   74 02 88 C2 52 BB 17 04 |. ..d|<.t...R...\n00000090 | F6 07 03 74 06 BE 88 7D   E8 17 01 BE 05 7C B4 41 |...t...}.....|.A\n000000A0 | BB AA 55 CD 13 5A 52 72   3D 81 FB 55 AA 75 37 83 |..U..ZRr=..U.u7.\n000000B0 | E1 01 74 32 31 C0 89 44   04 40 88 44 FF 89 44 02 |..t21..D.@.D..D.\n000000C0 | C7 04 10 00 66 8B 1E 5C   7C 66 89 5C 08 66 8B 1E |....f..\\|f.\\.f..\n000000D0 | 60 7C 66 89 5C 0C C7 44   06 00 70 B4 42 CD 13 72 |`|f.\\..D..p.B..r\n000000E0 | 05 BB 00 70 EB 76 B4 08   CD 13 73 0D 5A 84 D2 0F |...p.v....s.Z...\n000000F0 | 83 D0 00 BE 93 7D E9 82   00 66 0F B6 C6 88 64 FF |.....}...f....d.\n00000100 | 40 66 89 44 04 0F B6 D1   C1 E2 02 88 E8 88 F4 40 |@f.D...........@\n00000110 | 89 44 08 0F B6 C2 C0 E8   02 66 89 04 66 A1 60 7C |.D.......f..f.`|\n00000120 | 66 09 C0 75 4E 66 A1 5C   7C 66 31 D2 66 F7 34 88 |f..uNf.\\|f1.f.4.\n00000130 | D1 31 D2 66 F7 74 04 3B   44 08 7D 37 FE C1 88 C5 |.1.f.t.;D.}7....\n00000140 | 30 C0 C1 E8 02 08 C1 88   D0 5A 88 C6 BB 00 70 8E |0........Z....p.\n00000150 | C3 31 DB B8 01 02 CD 13   72 1E 8C C3 60 1E B9 00 |.1......r...`...\n00000160 | 01 8E DB 31 F6 BF 00 80   8E C6 FC F3 A5 1F 61 FF |...1..........a.\n00000170 | 26 5A 7C BE 8E 7D EB 03   BE 9D 7D E8 34 00 BE A2 |&Z|..}....}.4...\n00000180 | 7D E8 2E 00 CD 18 EB FE   47 52 55 42 20 00 47 65 |}.......GRUB .Ge\n00000190 | 6F 6D 00 48 61 72 64 20   44 69 73 6B 00 52 65 61 |om.Hard Disk.Rea\n000001A0 | 64 00 20 45 72 72 6F 72   0D 0A 00 BB 01 00 B4 0E |d. Error........\n000001B0 | CD 10 AC 3C 00 75 F4 C3   55 D2 A1 3F 00 00 80 20 |...<.u..U..?... \n000001C0 | 21 00 83 F7 DC 7A 00 08   00 00 DF 3F C3 37 00 00 |!....z.....?.7..\n000001D0 | 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 |................\n000001E0 | 00 00 00 00 00 00 00 00   00 00 00 00 00 00 00 00 |................\n000001F0 | 00 00 00 00 00 00 00 00   00 00 00 00 00 00 55 AA |..............U.\n\nParses disk partition information:\nPartition : MBR(0x80, 0x2120, 0x00, 0x83, 0xdcf7, 0x7a, 0x00000800, 0x37c33fdf)\nid:1,type:Linux,start:1.0MB,size:446.1015467643738GB\n","category":"page"}]
}
